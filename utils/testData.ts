import { useHabitStore } from '@/store/habitStore';
import moment from 'moment-jalaali';

moment.loadPersian({ usePersianDigits: false, dialect: 'persian-modern' });

// Test data for development - uncomment to use
export const loadTestData = async () => {
  const {
    addHabit,
    toggleHabitForDay,
    setDayMood,
    setDayNote,
    resetAllData
  } = useHabitStore.getState();

  // Clear existing data first
  resetAllData();

  // Sample habits with different categories and frequencies
  const testHabits = [
    {
      name: 'Ÿàÿ±ÿ≤ÿ¥ ÿµÿ®ÿ≠⁄ØÿßŸá€å',
      description: 'ŸÜ€åŸÖ ÿ≥ÿßÿπÿ™ Ÿæ€åÿßÿØŸá‚Äåÿ±Ÿà€å €åÿß ÿØŸà€åÿØŸÜ',
      icon: 'run',
      color: '#4CAF50',
      category: 'health',
      target: 1,
      frequency: 'daily' as const,
      isActive: true,
      reminderEnabled: true,
      reminderTime: '07:00',
      estimatedDuration: 30
    },
    {
      name: 'ŸÖÿ∑ÿßŸÑÿπŸá ÿ±Ÿàÿ≤ÿßŸÜŸá',
      description: 'ŸÖÿ∑ÿßŸÑÿπŸá ⁄©ÿ™ÿßÿ® €åÿß ŸÖŸÇÿßŸÑŸá ÿ™ÿÆÿµÿµ€å',
      icon: 'book-open',
      color: '#2196F3',
      category: 'learning',
      target: 1,
      frequency: 'daily' as const,
      isActive: true,
      reminderEnabled: true,
      reminderTime: '20:00',
      estimatedDuration: 45
    },
    {
      name: 'ŸÖÿØ€åÿ™€åÿ¥ŸÜ',
      description: 'ŸÖÿØ€åÿ™€åÿ¥ŸÜ Ÿà ÿ™ŸÜŸÅÿ≥ ÿπŸÖ€åŸÇ',
      icon: 'heart',
      color: '#9C27B0',
      category: 'mindfulness',
      target: 1,
      frequency: 'daily' as const,
      isActive: true,
      reminderEnabled: true,
      reminderTime: '06:30',
      estimatedDuration: 15
    },
    {
      name: 'ŸÜŸàÿ¥€åÿØŸÜ ÿ¢ÿ®',
      description: '8 ŸÑ€åŸàÿßŸÜ ÿ¢ÿ® ÿØÿ± ÿ±Ÿàÿ≤',
      icon: 'water',
      color: '#00BCD4',
      category: 'health',
      target: 8,
      frequency: 'daily' as const,
      isActive: true,
      reminderEnabled: false,
      reminderTime: '09:00',
      estimatedDuration: 1
    },
    {
      name: '€åŸà⁄Øÿß',
      description: 'ÿ™ŸÖÿ±€åŸÜÿßÿ™ €åŸà⁄Øÿß Ÿà ⁄©ÿ¥ÿ¥',
      icon: 'leaf',
      color: '#8BC34A',
      category: 'fitness',
      target: 3,
      frequency: 'weekly' as const,
      isActive: true,
      reminderEnabled: true,
      reminderTime: '18:00',
      estimatedDuration: 60
    },
    {
      name: 'ŸÜŸàÿ¥ÿ™ŸÜ ÿÆŸÑÿßŸÇÿßŸÜŸá',
      description: 'ŸÜŸàÿ¥ÿ™ŸÜ ÿØÿßÿ≥ÿ™ÿßŸÜ €åÿß ÿ¥ÿπÿ±',
      icon: 'lightbulb',
      color: '#FF9800',
      category: 'creativity',
      target: 1,
      frequency: 'daily' as const,
      isActive: true,
      reminderEnabled: true,
      reminderTime: '21:30',
      estimatedDuration: 30
    },
    {
      name: 'ÿ™ŸÖÿßÿ≥ ÿ®ÿß ÿÆÿßŸÜŸàÿßÿØŸá',
      description: 'ÿµÿ≠ÿ®ÿ™ ÿ®ÿß ÿßÿπÿ∂ÿß€å ÿÆÿßŸÜŸàÿßÿØŸá',
      icon: 'heart',
      color: '#E91E63',
      category: 'health',
      target: 1,
      frequency: 'daily' as const,
      isActive: true,
      reminderEnabled: false,
      reminderTime: '19:00',
      estimatedDuration: 20
    },
    {
      name: 'ŸÖÿ±ÿ™ÿ® ⁄©ÿ±ÿØŸÜ ÿßÿ™ÿßŸÇ',
      description: 'ÿ™ŸÖ€åÿ≤ Ÿà ŸÖÿ±ÿ™ÿ® ŸÜ⁄ØŸá ÿØÿßÿ¥ÿ™ŸÜ ŸÖÿ≠€åÿ∑',
      icon: 'star',
      color: '#FF5722',
      category: 'productivity',
      target: 1,
      frequency: 'daily' as const,
      isActive: true,
      reminderEnabled: false,
      reminderTime: '08:00',
      estimatedDuration: 15
    }
  ];

  // Add all habits
  testHabits.forEach(habit => {
    addHabit(habit);
  });

  // Wait a bit and get habit IDs after adding
  await new Promise(resolve => setTimeout(resolve, 100));
  const { habits } = useHabitStore.getState();
  const habitIds = habits.map(h => h.id);

  // Generate test data for last 45 days
  const today = moment();
  const startDate = moment().subtract(45, 'days');

  for (let date = startDate.clone(); date.isSameOrBefore(today); date.add(1, 'day')) {
    const dateString = date.format('YYYY-MM-DD');

    // Random mood (70% good, 20% ok, 10% bad)
    const moodRandom = Math.random();
    let mood: 'good' | 'ok' | 'bad';
    if (moodRandom < 0.7) mood = 'good';
    else if (moodRandom < 0.9) mood = 'ok';
    else mood = 'bad';

    setDayMood(dateString, mood);

    // Random notes (60% of days have notes)
    if (Math.random() < 0.6) {
      const notes = [
        'ÿ±Ÿàÿ≤ ÿÆŸàÿ®€å ÿ®ŸàÿØÿå ÿßŸÜÿ±⁄ò€å ÿ≤€åÿßÿØ€å ÿØÿßÿ¥ÿ™ŸÖ',
        '⁄©ŸÖ€å ÿÆÿ≥ÿ™Ÿá ÿ®ŸàÿØŸÖ ŸàŸÑ€å ⁄©ÿßÿ±Ÿáÿß€åŸÖ ÿ±Ÿà ÿßŸÜÿ¨ÿßŸÖ ÿØÿßÿØŸÖ',
        'ÿ±Ÿàÿ≤ Ÿæÿ±ÿ™ŸÜÿ¥€å ÿ®ŸàÿØ ÿßŸÖÿß ÿØÿ± ŸÜŸáÿß€åÿ™ ÿÆŸàÿ® ÿ™ŸÖŸàŸÖ ÿ¥ÿØ',
        'ÿßÿ≠ÿ≥ÿßÿ≥ ÿ®Ÿáÿ™ÿ±€å ŸÜÿ≥ÿ®ÿ™ ÿ®Ÿá ÿØ€åÿ±Ÿàÿ≤ ÿØÿßÿ¥ÿ™ŸÖ',
        'ÿßŸÖÿ±Ÿàÿ≤ ÿÆ€åŸÑ€å ÿÆŸàÿ® Ÿæ€åÿ¥ ÿ±ŸÅÿ™ÿå ÿ±ÿßÿ∂€å Ÿáÿ≥ÿ™ŸÖ',
        '⁄©ŸÖ€å ÿßÿ≥ÿ™ÿ±ÿ≥ ÿØÿßÿ¥ÿ™ŸÖ ŸàŸÑ€å ŸÖÿØ€åÿ±€åÿ™ÿ¥ ⁄©ÿ±ÿØŸÖ',
        'ÿ±Ÿàÿ≤ ÿ¢ÿ±ÿßŸÖ€å ÿ®ŸàÿØÿå ŸàŸÇÿ™ ÿ®€åÿ¥ÿ™ÿ±€å ÿ®ÿ±ÿß€å ÿÆŸàÿØŸÖ ÿØÿßÿ¥ÿ™ŸÖ',
        '⁄ÜÿßŸÑÿ¥‚ÄåŸáÿß€å€å ÿØÿßÿ¥ÿ™ ŸàŸÑ€å €åÿßÿØ ⁄Øÿ±ŸÅÿ™ŸÜ‚ÄåŸáÿß€å ÿÆŸàÿ®€å ŸáŸÖ ÿ®ŸàÿØ',
        'ÿßŸÜ⁄Ø€åÿ≤Ÿá ÿ®ÿßŸÑÿß€å€å ÿØÿßÿ¥ÿ™ŸÖ ÿßŸÖÿ±Ÿàÿ≤',
        'ÿ±Ÿàÿ≤ ŸÖÿπŸÖŸàŸÑ€å ÿ®ŸàÿØÿå Ÿá€å⁄Ü ÿßÿ™ŸÅÿßŸÇ ÿÆÿßÿµ€å ŸÜ€åŸÅÿ™ÿßÿØ',
        'ÿÆ€åŸÑ€å ŸÑÿ∞ÿ™ ÿ®ÿ±ÿØŸÖ ÿßÿ≤ ⁄©ÿßÿ±Ÿáÿß€å€å ⁄©Ÿá ⁄©ÿ±ÿØŸÖ',
        '⁄©ŸÖ€å Ÿæÿß€å€åŸÜ ÿ®ŸàÿØŸÖ ŸàŸÑ€å ÿ≥ÿπ€å ⁄©ÿ±ÿØŸÖ ŸÖÿ´ÿ®ÿ™ ÿ®ŸÖŸàŸÜŸÖ'
      ];
      const randomNote = notes[Math.floor(Math.random() * notes.length)];
      setDayNote(dateString, randomNote);
    }

    // Toggle habits based on mood and random factors
    habitIds.forEach((habitId, index) => {
      const habit = testHabits[index];

      // Base completion rate based on mood
      let completionRate = 0.5; // 50% base rate
      if (mood === 'good') completionRate = 0.8; // 80% on good days
      else if (mood === 'ok') completionRate = 0.6; // 60% on ok days
      else completionRate = 0.3; // 30% on bad days

      // Adjust based on habit type
      if (habit.category === 'health') completionRate += 0.1;
      if (habit.category === 'learning') completionRate += 0.05;
      if (habit.target > 1) completionRate -= 0.1; // Multi-target habits are harder

      // Weekly frequency habits (less frequent)
      if (habit.frequency === 'weekly') {
        completionRate *= 0.4; // Much less frequent
      }

      // Simulate realistic patterns
      const dayOfWeek = date.day();
      if (dayOfWeek === 0 || dayOfWeek === 6) { // Weekend
        if (habit.name.includes('Ÿàÿ±ÿ≤ÿ¥') || habit.name.includes('€åŸà⁄Øÿß')) {
          completionRate += 0.2; // More exercise on weekends
        } else if (habit.name.includes('ŸÖÿ∑ÿßŸÑÿπŸá')) {
          completionRate -= 0.1; // Less study on weekends
        }
      }

      // Add some randomness and streaks
      const random = Math.random();

      // Create some streaks (if previous day was completed, higher chance)
      const previousDay = date.clone().subtract(1, 'day').format('YYYY-MM-DD');
      const prevDayCompleted = useHabitStore.getState().getHabitsForDate(previousDay)
        .find(h => h.id === habitId)?.completed;

      if (prevDayCompleted) completionRate += 0.15; // Streak bonus

      // Implement the completion
      if (random < completionRate) {
        // For multi-target habits, sometimes complete partially
        if (habit.target > 1) {
          const completions = Math.floor(Math.random() * habit.target) + 1;
          for (let i = 0; i < completions; i++) {
            toggleHabitForDay(habitId, dateString);
          }
        } else {
          toggleHabitForDay(habitId, dateString);
        }
      }
    });
  }

  console.log('‚úÖ Test data loaded successfully!');
  console.log(`üìä Generated data for ${habitIds.length} habits over 45 days`);
  console.log('üéØ Habit IDs:', habitIds);
  console.log('üìÖ Date range:', startDate.format('YYYY-MM-DD'), 'to', today.format('YYYY-MM-DD'));
};

// Export function to clear test data
export const clearTestData = () => {
  const { resetAllData } = useHabitStore.getState();
  resetAllData();
  console.log('üóëÔ∏è All test data cleared!');
};